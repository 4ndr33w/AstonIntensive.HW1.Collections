package collections.interfaces;

import java.util.Collection;
import java.util.NoSuchElementException;


/**
 * Интерфейс CustomList представляет собой упорядоченную коллекцию элементов,
 * которая позволяет хранить дубликаты и обеспечивает доступ к элементам по индексу.
 * <p>
 * Этот интерфейс расширяет Collection и добавляет функциональность, специфичную
 * для упорядоченных коллекций, такую как управление элементами по индексу и
 * модификация списка с сохранением порядка.
 * </p>
 * @param <T> тип элементов, которые может содержать список
 * @see Collection
 */
public interface CustomList<T> extends Collection<T> {

    /**
     * Возвращает количество элементов  в коллекции.
     *
     * @return количество элементов в коллекции
     */
    int size();

    /**
     * Возвращает true, если коллекция не содержит элементов.
     *
     * @return true, если коллекция не содержит элементов
     */
    boolean isEmpty();

    /**
     * Добавляет новый элемент в конец коллекции.
     *
     * @param item добавляемый элемент
     * @return true (согласно спецификации {@link Collection#add})
     */
    boolean add(T item);

    /**
     * Вставляет указанный элемент в заданную позицию коллекции.
     * Сдвигает элемент, который находится в указанной позиции (если он есть),
     * и все последующие элементы вправо (увеличивает их индексы на единицу).
     *
     * @param index индекс, по которому должен быть вставлен указанный элемент
     * @param element элемент для вставки
     * @throws IndexOutOfBoundsException если индекс выходит за пределы допустимого диапазона
     *         (index < 0 || index > size)
     * @throws NullPointerException если {@link @param element} null
     */
    void add(int index, T element);

    /**
     * Возвращает элемент, который находится в указанной позиции в коллекции.
     *
     * @param index позиция элемента, который должен быть возвращен
     * @return элемент в указанной позиции в коллекции
     * @throws IndexOutOfBoundsException в случае, если индекс выходит за пределы допустимого диапазона (index < 0 || index >= size)
     */
    T get(int index);

    /**
     * Заменяет элемент, который находится в указанной позиции в коллекции элементом, переданным в качестве параметра.
     * Возвращает объект, который ранее находился на указанной позиции в коллекции.
     *
     * @param index Позиция заменяемого элемента в колекции
     * @param element Новый элемент, который будет установлен на указанную позицию
     * @return объект, который ранее находился на указанной позиции в коллекции
     * @throws IndexOutOfBoundsException если индекс выходит за пределы допустимого диапазона (index < 0 || index >= size)
     * @throws NullPointerException если новый элемент равен null
     */
    T set(int index, T element);

    /**
     * Удаляет первое вхождение указанного элемента из коллекции, если оно присутствует.
     * Если коллекция не содержит элемент, она остается без изменений.
     *
     * @param item элемент, который должен быть удален из коллекции, если присутствует
     * @return true, если коллекция содержала указанный элемент
     * @throws NullPointerException если переданный в качестве параметра элемент равен null
     */
    boolean remove(Object item);

    /**
     * Удаляет элемент, находящийся на указанной позиции в коллекции.
     * Сдвигает все последующие элементы влево (уменьшает их индексы на единицу).
     * Возвращает элемент, который был удален из списка.
     *
     * @param index индекс элемента, который должен быть удален
     * @return элемент, который находился на указанной позиции
     * @throws IndexOutOfBoundsException если индекс выходит за пределы допустимого диапазона (index < 0 || index >= size)
     */
    T remove(int index);

    /**
     * очищает колекцию
     */
    void clear();

    //------------------------------------------------------------------------
    // Далее идут методы, которые не входили в задание, но
    // необходимые для реализации интерфейса Collection
    //------------------------------------------------------------------------

    /**
     * Вставляет указанный элемент в начало коллекции.
     *
     * @param element элемент для добавления
     * @throws NullPointerException если указанный элемент равен null
     */
    void addFirst(T element);

    /**
     * Вставляет указанный элемент в конец коллекции.
     *<p>
     * Сдвигает все элементы коллекции право, чтобы освободить место для нового элемента.
     *</p>
     * @param element элемент для добавления
     * @throws NullPointerException если указанный элемент равен null
     */
    void addLast(T element);

    /**
     * Удаляет и возвращает первый элемент коллекции.
     *
     * @return первый элемент коллекции
     * @throws NoSuchElementException если коллекция пуста
     */
    T removeFirst();

    /**
     * Удаляет и возвращает последний элемент коллекции.
     *
     * @return последний элемент из коллекции
     * @throws NoSuchElementException если коллекция пуста
     */
    T removeLast();

    /**
     * Возвращает индекс первого вхождения указанного элемента коллекции,
     * или -1, если элемент в коллекции не найден.
     * Более формально, возвращает наименьший индекс {@code i} такой, что
     * {@code Objects.equals(o, get(i))},
     * или -1, если такого объекта в коллекции не содержится.
     *
     * @param o элемент для поиска
     * @return индекс первого вхождения элемента,
     *         или -1, если элемент не найден
     * @throws NullPointerException если переданный в качестве параметра элемент равен null
     */
    int indexOf(Object o);

    /**
     * Возвращает true, если коллекция содержит указанный элемент.
     * Более формально, возвращает true тогда и только тогда, когда коллекция содержит
     * хотя бы один элемент e такой, что (o==null ? e==null : o.equals(e)).
     *
     * @param o элемент, наличие которого в коллекции нужно проверить
     * @return true, если коллекция содержит указанный элемент
     * @throws NullPointerException если переданный в качестве параметра элемент равен null
     */
    boolean contains(Object o);
}
